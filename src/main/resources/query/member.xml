<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dotori.client.member.dao.MemberDao">


	<!-- ID 확인 쿼리 -->
	<select id="idCheck" resultType="int" parameterType="member">
		/* member - idCheck */
		select nvl((select 1 from member where member_id=#{member_id}),0) 
		as state from dual
	</select>
	
	
	<!-- 회원 가입 -->
	<insert id="memberJoin" parameterType="member">
		/* member - memberJoin */
		insert into member(member_num,member_id,member_pwd,member_name,
		member_address,member_phone,member_email,member_kind,member_signum,
		member_nickname,member_infoagree,member_evenagree,member_detailaddress,member_addDate) 
		values(member_seq.nextval,#{member_id},#{member_pwd},#{member_name},
		#{member_address},#{member_phone},#{member_eMail},#{member_kind},
		#{member_sigNum},#{member_nickName},#{member_infoAgree},#{member_evenAgree},#{member_detailAddress},sysdate)
	</insert>
	
	<!-- 회원 로그인 -->
	<!-- <select id="memberSession" parameterType="member" resultType="int">
		/* member - memberSession */
		select nvl((select 1 from member where member_id=#{member_id} and member_pwd=#{member_pwd}),0) 
		as state from dual
	</select> -->
	
	<!-- 회원 정보 전체 가져오기 -->
	<select id="memberAll" parameterType="member" resultType="member">
		/* member - memberAll */
		select * from member where member_id=#{member_id}
	</select>
	
	<!-- 회원 정보 가져오기 -->
	<select id="memberSession" parameterType="member" resultType="member">
		/* member - memberSession */
		select member_id,member_name,member_address,member_detailaddress,member_phone,member_eMail,member_kind,member_sigNum,member_point,member_nickName,member_infoAgree,member_evenAgree 
		from member where member_id=#{member_id} and member_pwd=#{member_pwd}
	</select>
	
	<!-- 회원 비밀번호 확인 -->
	<select id="passwordConfirm" parameterType="member" resultType="int">
		/* member - memberPasswordConfrim */
		select nvl((select 1 from member where member_pwd=#{member_pwd} and member_id=#{member_id}),0) 
		as state from dual
	</select>
	
	<!-- 회원 정보 업데이트 쿼리 -->
	<update id="memberUpdate" parameterType="member">
		/* member - memberUpdate */
		update member set  
		member_pwd=#{member_pwd},member_nickName=#{member_nickName},member_email=#{member_eMail},
		member_phone=#{member_phone},member_address=#{member_address},member_detailaddress=#{member_detailAddress},member_evenagree=#{member_evenAgree}  
		<if test="#{member_chPwd==1}">
		,member_mPwdDate=sysdate 
		</if>
		where member_id=#{member_id}
	</update>
	
	<!-- 회원 테이블에서 회원 탈퇴 -->
	<delete id="deleteMember" parameterType="member">
		delete from member where member_id=#{member_id}
	</delete>
	
	<!-- 삭제회원 테이블에 값 입력 -->
	<insert id="deleteMemberInsert" parameterType="member">
		/* member - deleteMemberInsert */
		insert into DELMEMBER(member_num,member_id,member_pwd,member_name,member_address,member_detailAddress,member_phone,member_eMail,member_kind,
		member_sigNum,member_point,member_addDate,member_nickName,member_infoAgree,member_evenAgree) 
		values(delmember_seq.nextval,#{member_id},#{member_pwd},#{member_name},#{member_address}
		<if test="member_detailAddress!=''">
		,#{member_detailAddress}
		</if>
		<if test="member_detailAddress==''">
		,''
		</if>
		,#{member_phone},#{member_eMail},#{member_kind},#{member_sigNum},#{member_point},#{member_addDate},#{member_nickName},#{member_infoAgree},#{member_evenAgree})
	</insert>
	
	<!-- 수정 폼에서 회원 비밀번호 확인 -->
	<select id="updatePasswordConfirm" parameterType="member" resultType="int">
		/* member - memberPasswordConfrim */
		select nvl((select 1 from member where member_pwd!=#{member_pwd} and member_id=#{member_id}),0) 
		as state from dual
	</select>
	
	<!-- 회원 마이페이지 '내가 만든 펀딩' 쿼리 -->	
	<select id="myFunding" parameterType="member" resultType="Project">
		/* member - myFunding */
		select project_thumb, project_url, project_name , project_summary, project_num, project_content, member_id, project_adddate, project_status  
		from project where member_id=#{member_id}
    	
	</select>
	
	<!-- 회원 마이페이지 '도토리 사용내역' 쿼리 -->
	<select id="usingDotori" parameterType="member" resultType="ordersM">
		/* member - usingDotori */
		select od.project_num, orders_price, project_name ,
		to_char(orders_date,'YYYY-MM-DD') orders_date,orders_num,
		od.member_id, orders_content,project_status,refundOk  
		from orders od inner join project pj   
		on od.project_num = pj.project_num  
		where od.member_id=#{member_id} order by orders_num desc
	</select>
	
	<!-- 마이페이지 '펀딩 중' 쿼리 -->
	<select id="fundingProcess" parameterType="member" resultType="Project">
		select project_name, sum(orders_price) orders_price,pj.project_num,  
		project_summoney,project_targetmoney,to_char(project_enddate,'YYYY-MM-DD') project_enddate,pj.member_id 
		from orders od inner join project pj 
		on od.project_num = pj.project_num 
		where od.member_id = #{member_id} 
		group by project_name,project_summoney,project_targetmoney,project_enddate,pj.member_id,pj.project_num
	</select>
	
	<!-- 도토리 충전 쿼리 -->
	<update id="dotoriCharge" parameterType="member">
		/* member - dotoriCharge */
		update member set 
		member_point = #{member_point}+#{member_pointCharge} 
		where member_id = #{member_id}
	</update>
	
	<!-- 비밀번호/아이디 확인 시 회원 테이블에 저장되어 있는 이메일로 보내기 위한 확인 작업 -->
	<select id="emailCheck" parameterType="member" resultType="int">
		select nvl((select 1 from member where member_email=#{member_eMail}),0) from dual
	</select>
	
	<!-- 이메일 확인 후 회원테이블에 저장되어 있는 아이디 값 보내기 -->
	<select id="logIdCheck" parameterType="member" resultType="member">
		select member_id,member_name from member where member_eMail = #{member_eMail}
	</select>
	
	<!-- 입력받은 이메일,아이디 값으로 테이블 안에서 비밀번호 찾는 쿼리 -->
	<select id="logPasswordCheck" parameterType="member" resultType="String">
		select member_pwd from member where member_eMail = #{member_eMail} and member_id=#{member_id}
	</select>
	
	<!-- 마이페이지 '도토리 사용 내역' 환불 버튼 쿼리 -->
	<update id="refund" parameterType="ordersM" statementType="CALLABLE">
         { CALL orders_back(
         #{orders_num}
         )}
    </update>
    
    <!-- 펀딩중 리스트 숫자 구하기 -->
    <select id="memberfundingListCnt" parameterType="member" resultType="int">
    	select count(project_name) from (select project_name, sum(orders_price) orders_price,pj.project_num,  
		project_summoney,project_targetmoney,to_char(project_enddate,'YYYY-MM-DD') project_enddate,pj.member_id  
		from orders od inner join project pj 
		on od.project_num = pj.project_num 
		where od.member_id = #{member_id} 
		group by project_name,project_summoney,project_targetmoney,project_enddate,pj.member_id,pj.project_num)
    </select>

</mapper>